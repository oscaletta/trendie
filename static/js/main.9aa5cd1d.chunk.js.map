{"version":3,"sources":["index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","margin","maxWidth","image","width","height","img","display","maxHeight","App","classes","useState","tokenData","setTokenData","priceData","setPriceData","isLoading","setIsLoading","currentDate","Date","formattedDate","getDate","getMonth","getFullYear","useEffect","ticker","urlTokenHistory","axios","get","then","response","data","console","log","usd","className","container","item","alt","src","small","xs","sm","direction","gutterBottom","variant","name","color","style","cursor","ReactDOM","render","document","querySelector"],"mappings":"wNAUMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,OAAQ,OACRC,SAAU,KAEZC,MAAO,CACLC,MAAO,IACPC,OAAQ,KAEVC,IAAK,CACHL,OAAQ,OACRM,QAAS,QACTL,SAAU,OACVM,UAAW,YAMf,SAASC,IAEP,IAAMC,EAAUjB,IAFH,EAGqBkB,mBAAS,IAH9B,mBAGNC,EAHM,KAGKC,EAHL,OAIqBF,mBAAS,GAJ9B,mBAING,EAJM,KAIKC,EAJL,OAKqBJ,oBAAS,GAL9B,mBAKNK,EALM,KAKKC,EALL,KAOTC,EAAc,IAAIC,KAChBC,EAAgBF,EAAYG,UAAY,IAAMH,EAAYI,WAAa,IAAMJ,EAAYK,cA0B/F,OAvBAC,qBAAU,WACRP,GAAa,GACb,IAAMQ,EAAS,YACTC,EAAkB,iEAAkEN,EAE1FO,IAAMC,IAAIF,GACJG,MAAK,SAAAC,GACH,IAAMC,EAAQD,EAASC,KACvBlB,EAAakB,MAIrBJ,IAAMC,IAAI,iFACJC,MAAK,SAAAC,GACHE,QAAQC,IAAIH,EAASC,KAAKN,IAAWK,EAASC,KAAKN,GAAQS,KAC3D,IAAMH,EAAQD,EAASC,KAAKN,GAC5BV,EAAagB,MAErBd,GAAa,KACb,IAKA,cAAC,IAAD,CAAWf,SAAS,KAApB,SACM,cAAC,IAAD,CAAOiC,UAAWzB,EAAQZ,MAA1B,SACA,eAAC,IAAD,CAAMsC,WAAS,EAACpC,QAAS,EAAzB,UACE,cAAC,IAAD,CAAMqC,MAAI,EAAV,SACE,cAAC,IAAD,CAAYF,UAAWzB,EAAQP,MAA/B,SACE,qBACEgC,UAAWzB,EAAQJ,IACnBgC,IAAI,UACJC,IAAK3B,GAAaA,EAAUT,OAASS,EAAUT,MAAMqC,YAI3D,eAAC,IAAD,CAAMH,MAAI,EAACI,GAAI,GAAIC,IAAE,EAACN,WAAS,EAA/B,UACE,eAAC,IAAD,CAAMC,MAAI,EAACI,IAAE,EAACL,WAAS,EAACO,UAAU,SAAS3C,QAAS,EAApD,UACE,eAAC,IAAD,CAAMqC,MAAI,EAACI,IAAE,EAAb,UACE,cAAC,IAAD,CAAYG,cAAY,EAACC,QAAQ,YAAjC,SACG7B,EAAa,8CAA2BJ,EAAUkC,OAErD,cAAC,IAAD,CAAYD,QAAQ,QAAQD,cAAY,EAAxC,uBAGA,cAAC,IAAD,CAAYC,QAAQ,QAAQE,MAAM,gBAAlC,4BAIF,cAAC,IAAD,CAAMV,MAAI,EAAV,SACE,cAAC,IAAD,CAAYQ,QAAQ,QAAQG,MAAO,CAAEC,OAAQ,WAA7C,0BAKJ,cAAC,IAAD,CAAMZ,MAAI,EAAV,SACE,cAAC,IAAD,CAAYQ,QAAQ,YAApB,SAAiC7B,EAAa,cAAkBF,GAAaA,EAAUoB,kBASvGgB,IAASC,OAAO,cAAC1C,EAAD,IAAQ2C,SAASC,cAAc,Y","file":"static/js/main.9aa5cd1d.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport ReactDOM from \"react-dom\";\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ButtonBase from \"@material-ui/core/ButtonBase\";\nimport axios from 'axios';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    margin: \"auto\",\n    maxWidth: 500\n  },\n  image: {\n    width: 128,\n    height: 128\n  },\n  img: {\n    margin: \"auto\",\n    display: \"block\",\n    maxWidth: \"100%\",\n    maxHeight: \"100%\"\n  }\n}));\n\n\n\nfunction App() {\n\n  const classes = useStyles();\n  const [tokenData, setTokenData] = useState('')\n  const [priceData, setPriceData] = useState(0)\n  const [isLoading, setIsLoading] = useState(false);\n\n  let currentDate = new Date();\n  const formattedDate = currentDate.getDate() + '-' + currentDate.getMonth() + '-' + currentDate.getFullYear();\n\n  \n  useEffect(() => {\n    setIsLoading(true);\n    const ticker = \"chainlink\";\n    const urlTokenHistory = 'https://api.coingecko.com/api/v3/coins/'+ticker+'/history?date='+formattedDate;\n\n    axios.get(urlTokenHistory)\n         .then(response => {\n            const data  = response.data\n            setTokenData(data)\n         });\n\n    //fetching updated price\n    axios.get('https://api.coingecko.com/api/v3/simple/price?ids='+ticker+'&vs_currencies=usd')\n         .then(response => {\n            console.log(response.data[ticker] && response.data[ticker].usd)\n            const data  = response.data[ticker]\n            setPriceData(data)\n         });\n    setIsLoading(false);\n  },[])\n  \n  //console.log(priceData.usd);\n\n  return (\n    <Container maxWidth=\"sm\">\n          <Paper className={classes.paper}>\n          <Grid container spacing={2}>\n            <Grid item>\n              <ButtonBase className={classes.image}>\n                <img\n                  className={classes.img}\n                  alt=\"complex\"\n                  src={tokenData && tokenData.image && tokenData.image.small}\n                />\n              </ButtonBase>\n            </Grid>\n            <Grid item xs={12} sm container>\n              <Grid item xs container direction=\"column\" spacing={2}>\n                <Grid item xs>\n                  <Typography gutterBottom variant=\"subtitle1\">\n                    {isLoading ? (<div>Loading ...</div>) : (tokenData.name)}\n                  </Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    Soramitsu\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    ID: 1030114\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"body2\" style={{ cursor: \"pointer\" }}>\n                    Comprar\n                  </Typography>\n                </Grid>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"subtitle1\">{isLoading ? ('Loading ...') : (priceData && priceData.usd )}</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n    </Container>\n  );\n}\n\nReactDOM.render(<App/>, document.querySelector(\"#root\"));\n"],"sourceRoot":""}